var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var b=0;return $jscomp.iteratorPrototype(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var b=a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};$jscomp.arrayFromIterator=function(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c};$jscomp.arrayFromIterable=function(a){return a instanceof Array?a:$jscomp.arrayFromIterator($jscomp.makeIterator(a))};
var exstat={},string={},array={},number={},normalize=function(a,b){b=void 0===b?[0,1]:b;if(2<b.length||!Array.isArray(a)||!Array.isArray(b))throw Error("invalid arguments to normalize");var c=Math.min.apply(Math,[].concat($jscomp.arrayFromIterable(a))),d=a.map(function(a){return a-c}),e=Math.max.apply(Math,[].concat($jscomp.arrayFromIterable(d))),d=d.map(function(a){return a/e}),f=b[1]-b[0],g=b[0];return d.map(function(a){return a*f+g})},median=function(a){if(!a.every(function(a){return"number"==
typeof a}))throw Error("invalid argument to median");var b=Math.floor(a.length/2),c=[].concat($jscomp.arrayFromIterable(a)).sort(function(a,b){return a-b});return 0!==a.length%2?c[b]:(c[b-1]+c[b])/2},mean=function(a){if(!a.every(function(a){return"number"==typeof a}))throw Error("invalid argument to mean");for(var b=a.length/a[0],c=0,d=0;d<b;d++)c+=a[d];return c/b},toUTF8Array=function(a){if("string"!=typeof a)throw Error("invalid input to toUTF8Array");for(var b=[],c=0;c<a.length;c++){var d=a.charCodeAt(c);
128>d?b.push(d):128<d?b.push(192|d>>6,128|d&63):55296>d||57344<=d?b.push(224|d>>12,128|d>>6&63,128|d&63):(c++,d=65536+((d&1023)<<10|a.charCodeAt(c)&1023),b.push(240|d>>18,128|d>>12&63,128|d>>6&63,128|d&63))}return b},binAdd=function(a,b){if("string"!=typeof a||"string"!=typeof b)throw Error("invalid input to binAdd");for(var c=parseInt(a,2),d=parseInt(b,2),c=(c+d).toString(2),d=a.length;c.length<d;)c="0"+c;return c.length===length?"1"+c:c},binToInt=function(a){if("string"!=typeof a)throw Error("invalid input to binToInt");
parseInt(a,2)},trunc=function(a,b){if("string"!=typeof a||"number"!=typeof b)throw Error("invalid input to trunc");for(;a.length>b;)a=a.slice(1);return a},binToHex=function(a){if("string"!=typeof a)throw Error("invalid input to binToHex");a=parseInt(a,2);if(NaN==a)throw Error("invalid input to binToHex");return a.toString(16)},inRange=function(a,b){if("number"!=typeof a||!Array.isArray(b))throw Error("invalid argument passed to inRange");return b[0]<=a?b[1]>=a?!0:!1:!1},mod=function(a,b){if("number"!=
typeof a||"number"!=typeof b)throw Error("invalid input to mod");return(a%b+b)%b},padZero=function(a,b){if("number"!=typeof a||"number"!=typeof b)throw Error("invalid input to padZero");var c=a.toString().split("");if(b<=c.length)throw Error("zero padding failed");for(;c.length<b;)c.unshift("0");return c.join("")};exstat.array={normalize:normalize,median:median,mean:mean};exstat.string={toUTF8Array:toUTF8Array,binAdd:binAdd,binToInt:binToInt,trunc:trunc,binToHex:binToHex};
exstat.number={mod:mod,padZero:padZero,inRange:inRange};module.exports=exstat;
